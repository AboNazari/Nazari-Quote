{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QouteDetails.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","quoteId","useState","theComment","setTheComment","useEffect","submitFormHandler","event","preventDefault","current","value","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","onAddCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","params","console","log","getSingleQuote","path","url","exact","to"],"mappings":"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","file":"static/js/3.7a3aca86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__36rdj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__9hwvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__37SGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3xbW5\",\"loading\":\"NewCommentForm_loading__PMCpu\",\"control\":\"NewCommentForm_control__hmXJt\",\"actions\":\"NewCommentForm_actions__2Jn3m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__Jp6ug\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddComment, quoteId } = props;\n  const [theComment, setTheComment] = useState();\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [onAddComment, status, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const comment = commentTextRef.current.value;\n    setTheComment(commentTextRef.current.value);\n    // optional: Could validate here\n    if (comment === \"\") {\n      return;\n    }\n\n    // send comment to server\n    sendRequest({ commentData: { text: comment }, quoteId });\n    setTheComment(\"\");\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea\n          id=\"comment\"\n          value={theComment}\n          rows=\"5\"\n          ref={commentTextRef}\n        ></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = props;\n\n  const {\n    sendRequest,\n    data: loadedComments,\n    error,\n    status,\n  } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const onAddCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  let comments;\n  if (status === \"pending\" && !error) {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && loadedComments.length === 0) {\n    comments = (\n      <p className=\"centered \"> NO comment Found! Start Adding some.</p>\n    );\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddComment={onAddCommentHandler} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { Route } from \"react-router\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetails = () => {\r\n  const match = useRouteMatch();\r\n  const { quoteId } = match.params;\r\n  console.log(quoteId);\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: quote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"centered focused\">\r\n        <p>{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!quote.text) {\r\n    return <p>No quote Found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n      <Route path={`${match.url}`} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comment`} className=\"btn--flat\">\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.url}/comment/`}>\r\n        <Comments quoteId={quoteId} />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}